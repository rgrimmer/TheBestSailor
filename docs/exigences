Les éléments :
Un serveur : C'est l'élément principale, le main. C'est lui qui contiendera la partie et la file d'attente
Un client : C'est l'élément distant avec qui le client va communiquer. C'est le joueur.
Une partie : Une partie contient la liste des joueurs, les élément du jeux et la boucle de jeux.
Une file d'attente : C'est là que les joueurs sont quand ils ne sont pas dans une partie.

Exigence coté server :
- Un serveur doit pouvoir tourner en permanence
- Un serveur ne peut avoir qu'une partie en cours à la fois.

Exigence en rapport à la file d'attente :
- Un joueur qui n'est pas en partie est forcément dans la file d'attente.
- Lorsque un joueur se déconnecte de la file d'attente, il est retiré de celle-ci. (Il est déconnecté du serveur)

Exigence en rapport à la partie :
- Une partie commence au bout de 30s.
- Une partie ne peut commencer sans joueurs. Si une partie doit commencer sans joueurs. Le décompte recommence.
- L'exigence précedente pourra être améliorée en commençant le décompte qu'à la première connexion d'un joueur.
- Une partie n'ayant plus de joueur se termine.
- Lorsque une partie commence, tous les joueurs en file d'attente son dirigé vers la partie.
- Lorsque une partie se termine, tous les joueurs participants son mis dans la file d'attente.
- Lorsque un joueur se déconnecte d'une partie, il est retiré de celle-ci. (Il est déconnecté du serveur
- Lorsqu'un joueur gagne la partie. Tous les autres joueurs son notifié par un message. 
Au bout de 10s, tous les joueurs sont redirigé vers la file d'attente. 
La parti se terminera car il n'y a plus de joueurs.

Protocole d'une partie :
- Une partie est créer à la fin du décompte.
- On envoi les éléments (TCP ou UDP avec validation)
- On attent que les joueurs soit prêt par un message READY de tous les joueurs (Qu'il est créé les éléments) (TCP ou UDP avec validation)
- Si aucune réponse d'un joueur au bout de 10s on le déconnect
- On démarre la boucle de jeu

Exigence pour le client :
- Un joueur doit pouvoir se connecter quand il le souhaite dans la limite des capacites du serveur
- Un joueur qui vient de se connecter est mis en attente.
- Un joueur peut demander à recommencer une partie. Tous les joueurs son remis dans la file d'attente.
- Un joueur peut quitter à tout moment.

Protocole serveur :
-1) Il lance un thread d'attente de connection.
-2) Il lance le chrono de début de partie.
-3)[IMPLICIT : Le chrono terminé et il y a des joueurs dans la file d'attente]
-4) Il créer une partie.
-5) Il "envoi la partie" aux joueurs.
-6)[IMPLICIT : Les joueurs sont prets]
-7) Il lance la boucle de jeu
-8)[IMPLICIT : partie fini]
-9) [GOTO] 2

Protocole -1) Attente de connection :
-1.1) [Attente passive d'une connection d'un joueur]
-1.2) Enregistrement du joueur dans la liste d'attente (id, nom, socketTCP)
-1.3) SI [Premier joueur se connectant au serveur]
-1.3a) Signaler premier joueur au serveur (Réinisialise le chrono ou lance le chrono)
-1.4) [GOTO] 1.1

Protocole -2) Lancer le chrono de début de partie :
-2.1) SI [Aucun joueur connecté]
-2.1a) [Attendre une notif de connexion]
-2.2) Lancer le chrono
-2.3) (Attendre la fin du chrono)

Protocole -4) Création d'une partie
-4.1) On génère une taille de carte
-4.2) On génère une graine pour le relief
-4.3) On génère une graine pour le vent
-4.4) On génère les balises
-4.5) On génère la position pour les bateaux
-4.6) On créé les éléments en mémoires


Données transmises :


TODO : Exigence en rapport au règle du jeux :
- Collision avec la terre
- Collision avec les autres
- Condition de victoire
- Détection de balise (checkpoint)
- Refactor vectorView -> add position, state translate and rotate in draw

Perspective :
Identification des joueurs par leur port/ip. Eviter la triche.
Ajout d'identification de joueurs. Dans le but d'avoir des scores persistant.


La création de message :
- Les contraintes
- Un message doit être mis cerialisé d'un coté et décerialisé de l'autre. 
- On ne peut créé un message en lui donnant une classe ne parametre car celle-ci 
n'existe que ddu coté client ou du coté server.

-Solution 1 : 
- On construit un message en utilisant ses parametres. ex : 
1) message(string:nom, unsigned short:port, ..)
2) packet << message;
3) packet >> message;
4) message.getName(), message.getPort() ..

Aventage :
- Sérialisation pour le packet à l'interieur de la classe.
- Getter pour les données dans le message.

Désaventage :
- Sérialisation à faire pour les données. (ex: packet >> map) Meme avec cette méthode.
- Beaucoup d'étape dont le seul du message est d'ajouter le type de message.

On pourrait remplacé par l'envoi par sans soucis :
1) packet << TypeEnvoiMap << map;


-Solution 2 :
Faire hérité Message de sf::Packet. Surcharger la méthode onSend pour ajouté le type
1) MessageEnvoiMap << map
2) pick la donnée de la socket et créé le message en fonction du type

Avantage :
1) Plus de transaparence pour l'utilisateur.
On défini toujours les opérateur >> packet pour nos données

Inconvéniant :
1) Possibilité d'insertion de données autres que celle attendus dans le Message
2) Séparation du code de sérialisation : exemple pour un message envoyé par le client
packet << ClientMap  // code coté client uniquement
packet >> ServerMap // code coté server uniquement

Cas d'étude, l'envoi des info du client : class ClientPlayer
- String            nom;
- unsigned short    portUdp
- socketTCP
...

Ces données sont attendu par le serveur : class ServerPlayer
- String            nom
- unsigned short    portUdp
-sf::TCPSocket      socket tcp du joueur
...

Solution naive
On peut vite se rendre compte que filement, les donnée utiles son celle qui vont être transportées.
Pour utiliser au mieux l'orienté objet et la réutilisabilité, 
il faut extraire les données utiles de cette classe et les mettre dans une autre.
Et ensuite implémenté les opérateurs de flux pour cette classe.
Pour une classe Game on aurait donc ClientGame et ServerGame qui contienne chaqu'un CommonGame
Le problèm est que, pour la map, on transmet que le header. 
Et que ce n'est pas la seul donnée qui est en commun entre le server et le client.

Solution 3 :
Mixer les solutions proposé : étendre les Packets et Ajouter un constructeur.
On n'utiliserait donc plus le système d'opérateur de flux.
On construit un message par ces parametres : ex (dimMap, dimMap, size)
On propose des getters pour ces variables.
On peut directement envoyer le message sans repasser par un packet
On recoi un packet qu'on va regarder pour déterminer son type.
On le recréé :
MsgType = packet.getData() ...
if(MsgType == MsgGame() )
    On caste.

Le contenu d'un Message
Le constructeur :
Ce qui est envoyé est un void* d'une taille défini. 
Les données du constructeur on l'opérateur de flux défini mais certain type ne 
sont pas constant et ne devrait pas être inscrit telle quel.
On a deux solutions:
1) Mettre les données dans le packet à la main comme si l'utilisateur avait utilisé 
l'opérateur de flux en remplacement les vriables non constantes.
2) Ne pas du tout utilisé le stockage interne prévu.
On place les parametres dans des variables membres.
Lors du onSend(), on utilise les variables membre pour envoyer les données.
( En faite c'est stupide .. )

Comment définir les getters ?
Les données d'un packet son déja enregistré. 
Tout se joue sur le onReceive(), On parse le packet .. (comment)

Conclusion :
Le problème reste le meme, si on ne peut extraire les données à envoyer des classes client et server,
 !! Il n'est pas possible d'avoir la serialisation au meme endroit. !!

Cependant, il est possible de réduire l'étape de sérialisation grace à l'héritage.
La réception ce fait de la façon suivante : regarder qu'elle message on attend.
Récupérer le contenu dans la classe de message qui va bien.
On a cependant un gros problème sur les opérateurs de flux. 
En l'état on peut mettre n'importe quel donnée dans un message.

Opérateur de flux Packet >> MaClasse ou MsgMaClasse >> MaClasse.
Le premier permet une plus forte généricité. Pas besoin de redéfinir l'opréteur pour un message différent.
Le second offre beaucoup plus de controle.
De plus, dans notre cas, la généricité n'apport rien.
Si on envoi un meme objet dans un message différent, 
c'est qu'on ne veut peut être pas envoyer les meme données.


Conlusion :
On va donc utiliser un système de message par héritage de packet couplé à des opérateurs de flux spécifique.


Retour sur les messages :
Solution envisagé : Envoyer des "objets"
Il se trouve que j'ai un peu mélangé les données client/server et les données partagés.
En réalité se ne sont pas des données partagées mais des données nécessaires pour la création 
ou la modification de donnée coté client ou server.
Cet objet est créé coté client, exemple :

Shared :
ObjWorld;
HeaderMap;

Packet << ObjWorld {
packet << cw.getHeader();
packet << cw.getHeightSeed();
packet << cw.getWindSeed();
}

Packet >> ObjWorld {
packet >> header;
packet >> seed1;
packet >> seed2;
ObjWorld = ObjWorld(header, seed1, seed2)
}

packet << Header {
packet << width;
packet << height;
}

packet >> Header {
packet >> width;
packet >> height;
}

// Client
// Données
ClientWorld cw;
// Local
ObjWorld ow( cw.getHeader, cw.getSeed1, cw.getSeed2);
send(MsgWorld(ow));

// Server:
// Données
ServerWorld sw;
// Local
receive(MsgWorld)
MsgWorld >> ObjWorld;

ObjWorld;
ObjWorld >> ServerWorld {
ow.getHeader() >> header;
ow.getHeightSeed() >> seed1;
ow.getWindSeed() >> seed2;
}


Règle de positionnement de la voile :
Tout d'abord, on détermine si la voile est  à babord ou tribord en fonction du vent (apparent ou non).
Ensuite l'angle entre la voile et le bateau ne peut dépasser l'angle entre le vent apparent et le bateau.
L'angle entre la voile et le bateau ne peut être contraint à moins de 5-10°.
Cela implique que lorsque le bateau remonte trop le vent, le vent n'a plus d'effet sur la voile.

( !!! FAUX !!! ) Ensuite l'angle entre le bateau et la voile ne peut faire qu'un angle de 90°. Un angle plus important n'est pas
possible en réalité sur une voile contrainte (Containte dans le sens : On veut que le vent pousse sur la voile)
Une voile non contrainte (laissé au vent sans contrainte) pourrait l'être mais cela n'a aucun intéret.


Etude de la terminaison d'une partie (coté client)
1. La partie est en cours
2. Le client reçoi un message fin de partie (Nom du gagnant, temps d'affichage)
3. On affiche le gagnant.
4. Une fois le temps fini. On repasse dans l'état en file d'attente.

(coté serveur)
1. La partie est en cours.
2. On détecte la fin de partie.
3. On passe dans le  sous-état, "terminaison".
4. On envoi le message fin de partie aux joueurs
5. On lance un chrono
6. Dans l'update si le chrono est terminer. On passe dans l'état file d'attente
